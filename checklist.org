
* Notifications

** To complete

*** DONE Create schema

*** DONE Add indexes to schema

*** DONE Add business logic for test scenarios
    - After a test scenario is created/execute/deleted create notification
      and fire off user notifications

*** DONE divide into workers

*** DONE Add notifs endpoint

*** DONE If time, create simple UI

*** DONE Write readme

*** TODO Deploy on server


** To add
- error handling
- deletion handling for test scenario
- put the messages in sqs
- UI should be restricted to the user
- tests
- performance testing for large number of subscriptions

** pros
- deduplication of data
- decoupling of business logic (aka CRUD for test scenarios)
  and notification sending, so if notifications fail then we
  are okay
- extenisble, if we wanted to send emails, slack notifications, sms,
  we can add all that logic to the UserNotification worker and its
  happening behind

** cons
- currently no retry mechanism for failed workers, would
  be easy to add in with a worker library of some sort, ie sidekiq
  for rails, reason i chose to write my own was for sake of example
  and simplicity

- deduplication of data schema requires so extra round trips, we could
  include the message in the UserNotification model but would make it hard
  to centrally update

-'
